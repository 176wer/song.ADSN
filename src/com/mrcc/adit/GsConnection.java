/*
 *  GsConnection.java 0.1 12/20/2002
 *
 *  Copyright:
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 */
package com.mrcc.adit;

import java.sql.*;
import javax.swing.JOptionPane;
import java.io.*;

/**
 *@author     gsherman
 *@created    December 20, 2002
 */
public class GsConnection extends javax.swing.JDialog {
	private boolean userCancel = false;
	private Connection con;
	String driver;


	/**
	 *  Creates new form GsConnection
	 *
	 *@param  parent  parent widget
	 *@param  modal   flag to indicate if form is modal or not
	 */
	public GsConnection(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		getRootPane().setDefaultButton(jButton1);

		setSize(460, getSize().height);
		setTitle("Connect to a Database");
		try {
			File urls = new File("urls.ini");

			FileReader ur = new FileReader(urls);
			BufferedReader in = new BufferedReader(ur);
			String lineIn;
			try {
				while ((lineIn = in.readLine()) != null) {
					jcmbUrl.addItem(lineIn);
				}
			} catch (IOException ioe) {
				System.out.println(ioe.getMessage());
			}
		} catch (FileNotFoundException fnf) {
			System.out.println(fnf.getMessage());
		}
		try {
			File drivers = new File("drivers.ini");

			FileReader dr = new FileReader(drivers);
			BufferedReader din = new BufferedReader(dr);
			String dLineIn;
			try {
				while ((dLineIn = din.readLine()) != null) {
					jcmbDriver.addItem(dLineIn);
				}
			} catch (IOException ioe) {
				System.out.println(ioe.getMessage());
			}
		} catch (FileNotFoundException fnf) {
			System.out.println(fnf.getMessage());
		}
		//   jcmbUrl.addItem("jdbc:mysql://mrcc.com/alaskasnow?user=mrcc");
		//  jcmbUrl.addItem("jdbc:postgresql://qgis/qgis_data");
		//jcmbDriver.addItem("com.mysql.jdbc.Driver");
		//jcmbDriver.addItem("org.postgresql.Driver");
	}


	/**
	 *  This method is called from within the constructor to initialize the form.
	 *  WARNING: Do NOT modify this code. The content of this method is always
	 *  regenerated by the Form Editor.
	 */
	private void initComponents() {
		//GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jtxtUser = new javax.swing.JTextField();
		jcmbDriver = new javax.swing.JComboBox();
		jcmbUrl = new javax.swing.JComboBox();
		jtxtPasswd = new javax.swing.JPasswordField();

		getContentPane().setLayout(new java.awt.GridBagLayout());

		setTitle("Foo");
		setName("Database connection parameters");
		addWindowListener(
			new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent evt) {
					closeDialog(evt);
				}
			});

		jLabel1.setText("JDBC Driver");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 2);
		getContentPane().add(jLabel1, gridBagConstraints);

		jLabel2.setText("JDBC URL");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 2);
		getContentPane().add(jLabel2, gridBagConstraints);

		jButton1.setText("Ok");
		jButton1.setSelected(true);
		jButton1.addActionListener(
			new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jButton1ActionPerformed(evt);
				}
			});

		jButton1.addMouseListener(
			new java.awt.event.MouseAdapter() {
				public void mouseReleased(java.awt.event.MouseEvent evt) {
					jButton1MouseReleased(evt);
				}
			});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
		getContentPane().add(jButton1, gridBagConstraints);

		jButton2.setText("Cancel");
		jButton2.addMouseListener(
			new java.awt.event.MouseAdapter() {
				public void mouseReleased(java.awt.event.MouseEvent evt) {
					jButton2MouseReleased(evt);
				}
			});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
		getContentPane().add(jButton2, gridBagConstraints);

		jLabel3.setText("User");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 2);
		getContentPane().add(jLabel3, gridBagConstraints);

		jLabel4.setText("Password");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 2);
		getContentPane().add(jLabel4, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
		getContentPane().add(jtxtUser, gridBagConstraints);

		jcmbDriver.setEditable(true);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		getContentPane().add(jcmbDriver, gridBagConstraints);

		jcmbUrl.setEditable(true);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		getContentPane().add(jcmbUrl, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
		getContentPane().add(jtxtPasswd, gridBagConstraints);

		pack();
	}

	//GEN-END:initComponents


	/**
	 *  Action listener for connect
	 *
	 *@param  evt  ActionEvent
	 */
	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		//GEN-FIRST:event_jButton1ActionPerformed
		// Add your handling code here:
		userCancel = false;
		connect();
	}

	//GEN-LAST:event_jButton1ActionPerformed


	/**
	 *  Description of the Method
	 *
	 *@param  evt  Description of the Parameter
	 */
	private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_jButton2MouseReleased
		// Add your handling code here:
		userCancel = true;
		hide();
	}

	//GEN-LAST:event_jButton2MouseReleased


	/**
	 *  Description of the Method
	 *
	 *@param  evt  Description of the Parameter
	 */
	private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {
		//GEN-FIRST:event_jButton1MouseReleased
		// Add your handling code here:
		connect();

	}

	//GEN-LAST:event_jButton1MouseReleased


	/**
	 *  Closes the dialog
	 *
	 *@param  evt  Description of the Parameter
	 */
	private void closeDialog(java.awt.event.WindowEvent evt) {
		//GEN-FIRST:event_closeDialog
		setVisible(false);
		dispose();
	}

	//GEN-LAST:event_closeDialog


	/**
	 *@param  args  the command line arguments
	 */
	public static void main(String args[]) {
		new GsConnection(new javax.swing.JFrame(), true).show();
	}


	/**
	 *  Gets the url attribute of the GsConnection object
	 *
	 *@return    The JDBC url 
	 */
	public String getUrl() {
		return (String) jcmbUrl.getSelectedItem();
	}


	/**
	 *  Gets the driver attribute of the GsConnection object
	 *
	 *@return    The JDBC driver string
	 */
	public String getDriver() {
		return (String) jcmbDriver.getSelectedItem();
	}


	/**
	 *  Gets the user name attribute of the GsConnection object
	 *
	 *@return    The user name
	 */
	public String getUser() {
		return jtxtUser.getText();
	}


	/**
	 *  Gets the password attribute of the GsConnection object
	 *
	 *@return    The password value
	 */
	public String getPasswd() {
		return (new String(jtxtPasswd.getPassword()));
	}


	/**
	 *  Description of the Method
	 *
	 *@return    Description of the Return Value
	 */
	public boolean doConnect() {
		return !userCancel;
	}


	/*
	 *  public void setUrl(String url){
	 *  jtxtUrl.setText(url);
	 *  }
	 */
	/*
	 *  public void setDriver(String d){
	 *  jtxtDriver.setText(d);
	 *  }
	 */
	/**
	 *  Sets the user attribute of the GsConnection object
	 *
	 *@param  u  The new user value
	 */
	public void setUser(String u) {
		jtxtUser.setText(u);
	}


	/**
	 *  Sets the passwd attribute of the GsConnection object
	 *
	 *@param  p  The new passwd value
	 */
	public void setPasswd(String p) {
		jtxtPasswd.setText(p);
	}


	/**
	 *  Gets the connection attribute of the GsConnection object
	 *
	 *@return    The connection value
	 */
	public Connection getConnection() {
		return con;
	}


	/**
	 *  Description of the Method
	 */
	private void connect() {
		try {
			System.out.println("Attempting to load the driver: " + (String) jcmbDriver.getSelectedItem());
			Class.forName((String) jcmbDriver.getSelectedItem());

		} catch (ClassNotFoundException nc) {
			JOptionPane.showMessageDialog(this, "Driver not found", "Error Loading Driver", JOptionPane.ERROR_MESSAGE);
			System.out.println("Driver not found");

		}

		try {
			con = DriverManager.getConnection((String) jcmbUrl.getSelectedItem(), jtxtUser.getText(), new String(jtxtPasswd.getPassword()));
			System.out.println("Connected to the database");
			hide();

		} catch (SQLException se) {
			System.out.println("SQL Exeception: " + se.getMessage());
			String msg = se.getMessage();

			JOptionPane.showMessageDialog(this, se.getMessage());
			//getMessage());
		}

	}


	// Variables declaration - do not modify//GEN-BEGIN:variables

	private javax.swing.JLabel jLabel4;
	private javax.swing.JButton jButton2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JButton jButton1;
	private javax.swing.JPasswordField jtxtPasswd;
	private javax.swing.JTextField jtxtUser;
	private javax.swing.JComboBox jcmbDriver;
	private javax.swing.JComboBox jcmbUrl;
	// End of variables declaration//GEN-END:variables

}

