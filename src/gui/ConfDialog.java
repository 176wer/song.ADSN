/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import java.awt.Choice;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Enumeration;

import javax.comm.CommPortIdentifier;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.KeyStroke;

import control.SerialConnectionException;

/**
 *
 * @author Administrator
 */
public class ConfDialog extends javax.swing.JDialog implements ItemListener  {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private SerialParameters parameters;
    private SerialConnection conn;
    private JFrame frame;
    /**
     * Creates new form ConfDialog
     */
    public ConfDialog(JFrame parent, SerialParameters parameters,SerialConnection con) {
        super(parent);
             frame=parent;
          this.parameters=parameters;
          this.conn=con;
        initComponents();
       
      
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

  

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
                             
    private void initComponents() {
     
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        portChoice = new Choice();
        jLabel1 = new javax.swing.JLabel();
        flowChoiceIn = new Choice();
        jLabel3 = new javax.swing.JLabel();
        databitsChoice = new Choice();
        jLabel4 = new javax.swing.JLabel();
        parityChoice = new Choice();
        jLabel5 = new javax.swing.JLabel();
        baudChoice = new Choice();
        jLabel6 = new javax.swing.JLabel();
        flowChoiceOut = new Choice();
        jLabel7 = new javax.swing.JLabel();
        stopbitsChoice = new Choice();
        jLayeredPane1 = new javax.swing.JLayeredPane();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(null);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        getContentPane().add(okButton);
        okButton.setBounds(250, 220, 69, 23);
        getRootPane().setDefaultButton(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton);
        cancelButton.setBounds(380, 220, 69, 23);

        jLabel2.setText("串口号：");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(40, 30, 60, 30);

        portChoice.addItemListener(this);
        add(portChoice);
        listPortChoices();
        portChoice.select(parameters.getPortName());
        portChoice.setBounds(160, 30, 80, 21);
        
        

        jLabel1.setText("Flow Control In：");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(40, 80, 110, 30);

        flowChoiceIn = new Choice();
        flowChoiceIn.addItem("None");
        flowChoiceIn.addItem("Xon/Xoff In");
        flowChoiceIn.addItem("RTS/CTS In");
        flowChoiceIn.select(parameters.getFlowControlInString());
        flowChoiceIn.addItemListener(this);
        getContentPane().add(flowChoiceIn);
        flowChoiceIn.setBounds(160, 80, 90, 21);

        jLabel3.setText("数据位：");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(40, 120, 60, 15);

        databitsChoice = new Choice();
        databitsChoice.addItem("5");
        databitsChoice.addItem("6");
        databitsChoice.addItem("7");
        databitsChoice.addItem("8");
        databitsChoice.select(parameters.getDatabitsString());
        databitsChoice.addItemListener(this);
        getContentPane().add(databitsChoice);
        databitsChoice.setBounds(160, 120, 70, 21);

        jLabel4.setText("校检位：");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(40, 160, 50, 15);

        parityChoice = new Choice();
        parityChoice.addItem("None");
        parityChoice.addItem("Even");
        parityChoice.addItem("Odd");
        parityChoice.select("None");
        parityChoice.select(parameters.getParityString());
        parityChoice.addItemListener(this);
        getContentPane().add(parityChoice);
        parityChoice.setBounds(160, 160, 70, 21);

        jLabel5.setText("比特率：");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(260, 30, 60, 15);

        baudChoice.addItem("300");
        baudChoice.addItem("2400");
        baudChoice.addItem("9600");
        baudChoice.addItem("14400");
        baudChoice.addItem("28800");
        baudChoice.addItem("38400");
        baudChoice.addItem("57600");
        baudChoice.addItem("152000");
        baudChoice.select(Integer.toString(parameters.getBaudRate()));
        baudChoice.addItemListener(this);
        getContentPane().add(baudChoice);
        baudChoice.setBounds(380, 30, 70, 21);

        jLabel6.setText("Flow Control Out:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(260, 80, 110, 15);

        flowChoiceOut = new Choice();
        flowChoiceOut.addItem("None");
        flowChoiceOut.addItem("Xon/Xoff Out");
        flowChoiceOut.addItem("RTS/CTS Out");
        flowChoiceOut.select(parameters.getFlowControlOutString());
        flowChoiceOut.addItemListener(this);
        getContentPane().add(flowChoiceOut);
        flowChoiceOut.setBounds(380, 80, 110, 21);

        jLabel7.setText("停止位");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(260, 120, 36, 15);

        stopbitsChoice = new Choice();
        stopbitsChoice.addItem("1");
        stopbitsChoice.addItem("1.5");
        stopbitsChoice.addItem("2");
        stopbitsChoice.select(parameters.getStopbitsString());
        stopbitsChoice.addItemListener(this);
        getContentPane().add(stopbitsChoice);
        stopbitsChoice.setBounds(380, 120, 60, 21);
        getContentPane().add(jLayeredPane1);
        jLayeredPane1.setBounds(18, 188, 100, 100);

        pack();
    }// </editor-fold>                        

    private void okButtonActionPerformed(ActionEvent evt) {
        doClose(RET_OK);
        
    }                                        

    private void cancelButtonActionPerformed(ActionEvent evt) {
        doClose(RET_CANCEL);
    }                                            

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {                             
       doClose(RET_CANCEL);
    }                            

    private void baudChoiceActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }                                          
    
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
      void listPortChoices() {
            CommPortIdentifier portId;

            Enumeration en = CommPortIdentifier.getPortIdentifiers();

            // iterate through the ports.
            while (en.hasMoreElements()) {
                portId = (CommPortIdentifier) en.nextElement();
                if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                    portChoice.addItem(portId.getName());
                }
            }
            portChoice. select (parameters.getPortName());
        }
         /*
        设置Item
      */
      public void setConfiguration(){
    	  portChoice.select(parameters.getPortName());
          baudChoice.select(parameters.getBaudRateString());
          flowChoiceIn.select(parameters.getFlowControlInString());
          flowChoiceOut.select(parameters.getFlowControlOutString());
          databitsChoice.select(parameters.getDatabitsString());
          stopbitsChoice.select(parameters.getStopbitsString());
          parityChoice.select(parameters.getParityString());
      }
      /*
      
      */
       public void setParameters() {
            parameters.setPortName((String) portChoice.getSelectedItem());
	        parameters.setBaudRate(baudChoice.getSelectedItem().toString());
            parameters.setFlowControlIn(flowChoiceIn.getSelectedItem().toString());
            parameters.setFlowControlOut(flowChoiceOut.getSelectedItem().toString());
            parameters.setDatabits(databitsChoice.getSelectedItem().toString());
            parameters.setStopbits(stopbitsChoice.getSelectedItem().toString());
            parameters.setParity(parityChoice.getSelectedItem().toString() );
        }
       
       /*
       当前串口状态下，如果端口已被打开，则不允许修改port
       如果当前的选择不支持该环境，用户将会接收到相应通知，并回滚到
       先前状态
       */
       

    // Variables declaration - do not modify                     
    private Choice baudChoice;
    private javax.swing.JButton cancelButton;
    private Choice databitsChoice;
    private Choice flowChoiceIn;
    private Choice flowChoiceOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JButton okButton;
    private Choice parityChoice;
    private Choice portChoice;
    private Choice stopbitsChoice;
    // End of variables declaration                   

    private int returnStatus = RET_CANCEL;
	@Override
	public void itemStateChanged(ItemEvent e) {
		// TODO Auto-generated method stub
		 
		  if (conn.isOpen()) {
              // 判断端口是否一致
              if (e.getItemSelectable() == portChoice) {

                  AlertDialog ad = new AlertDialog(frame, "Port Open!",
                          "Port can not",
                          "be changed",
                          "while a port is open.");


                  setConfiguration();
                  return;
              }
              //设置串口参数
              setParameters();
              try {

                  conn .setConnectionParameters();
              } catch (SerialConnectionException ex) {

                  AlertDialog ad = new AlertDialog(frame,
                          "Unsupported Configuration!",
                          "Configuration Parameter unsupported,",
                          "select new value.",
                          "Returning to previous configuration.");
                  setConfiguration();
              }
          } else {

              setParameters();
          }
      }
          
	}
 
